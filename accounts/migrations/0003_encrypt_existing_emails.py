# Generated by Django 4.2.25 on 2025-10-28 03:43

"""
Data migration to encrypt existing plaintext email addresses.

This migration:
1. Reads all existing users with plaintext emails
2. Encrypts each email using AES-256-GCM
3. Generates SHA-256 digest for lookups
4. Stores encrypted data in new fields

IMPORTANT: This is irreversible - make a database backup before running!
"""

from django.db import migrations


def encrypt_existing_emails(apps, schema_editor):
    """
    Encrypt all existing plaintext emails.

    For each user:
    - Encrypt email -> encrypted_email field
    - Generate digest -> email_digest field
    - Keep original in email field (for backwards compatibility)

    This allows gradual transition to encrypted emails.
    """
    # Import encryption functions
    # Note: We can't import from models directly in migrations
    # So we import from encryption module and use historical User model
    from accounts.encryption import encrypt_email, generate_email_digest

    # Get historical User model (state at this migration)
    User = apps.get_model("accounts", "User")

    users_encrypted = 0
    users_skipped = 0
    errors = []

    # Process all users
    for user in User.objects.all():
        try:
            # Skip if already encrypted
            if user.encrypted_email and user.email_digest:
                users_skipped += 1
                continue

            # Skip if no email
            if not user.email:
                users_skipped += 1
                continue

            # Encrypt email
            user.encrypted_email = encrypt_email(user.email)

            # Generate digest
            user.email_digest = generate_email_digest(user.email)

            # Save (bypass custom save() method by using update_fields)
            user.save(update_fields=['encrypted_email', 'email_digest'])

            users_encrypted += 1

        except Exception as e:
            error_msg = f"Failed to encrypt email for user {user.username}: {e}"
            errors.append(error_msg)
            print(f"WARNING: {error_msg}")

    # Print summary
    print(f"\n=== Email Encryption Migration Summary ===")
    print(f"Users encrypted: {users_encrypted}")
    print(f"Users skipped: {users_skipped}")
    print(f"Errors: {len(errors)}")

    if errors:
        print("\nErrors encountered:")
        for error in errors:
            print(f"  - {error}")

    # Fail migration if there were critical errors
    if errors and users_encrypted == 0:
        raise Exception(
            f"Migration failed: Could not encrypt any emails. "
            f"Errors: {', '.join(errors)}"
        )


def reverse_migration(apps, schema_editor):
    """
    Reverse migration: Clear encrypted fields.

    This doesn't decrypt emails (they're still in plaintext email field).
    It just clears the encrypted_email and email_digest fields.
    """
    User = apps.get_model("accounts", "User")

    # Clear encrypted fields
    User.objects.all().update(
        encrypted_email=None,
        email_digest=None
    )

    print("Cleared encrypted_email and email_digest fields for all users")


class Migration(migrations.Migration):

    dependencies = [
        ("accounts", "0002_add_email_encryption_fields"),
    ]

    operations = [
        migrations.RunPython(
            encrypt_existing_emails,
            reverse_code=reverse_migration,
        ),
    ]
